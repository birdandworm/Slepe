import random

# Sample OSRS item names; expand as desired
OSRS_ITEMS = [
    "Bronze sword", "Iron pickaxe", "Cowhide", "Rune scimitar", "Dragon scimitar",
    "Partyhat", "Abyssal whip", "Saradomin brew", "Zulrah's scales", "Barrows gloves",
    "Rune platebody", "Mithril platebody", "Dragon pickaxe", "Bandos tassets",
    "Armadyl godsword", "Sanfew serum", "Ring of wealth", "Fire cape", "Dragon bones", "Magic logs"
]

class Tile:
    def __init__(self, index, item_name, effect=None, target=None):
        self.index = index
        self.item_name = item_name
        self.effect = effect        # None, "skip_ahead", or "fall_back"
        self.target = target        # Target tile index if effect is triggered

    def __repr__(self):
        if self.effect:
            return f"{self.index}: {self.item_name} ({self.effect} to {self.target})"
        return f"{self.index}: {self.item_name}"

def generate_board(
    num_tiles=30,
    num_skip_ahead=3,
    num_fall_back=3,
    seed=None
):
    if seed is not None:
        random.seed(seed)

    # Ensure enough unique items for the tiles
    items = random.choices(OSRS_ITEMS, k=num_tiles)

    tiles = [Tile(idx, item) for idx, item in enumerate(items)]

    # Choose skip ahead and fall back positions
    available_indices = set(range(1, num_tiles-1))
    skip_ahead_indices = random.sample(list(available_indices), num_skip_ahead)
    available_indices -= set(skip_ahead_indices)
    fall_back_indices = random.sample(list(available_indices), num_fall_back)

    # Assign skip ahead (ladder) tiles
    for idx in skip_ahead_indices:
        # Jump ahead by 3-8 tiles, but not past the end
        jump = random.randint(3, 8)
        target = min(idx + jump, num_tiles - 1)
        tiles[idx].effect = "skip_ahead"
        tiles[idx].target = target

    # Assign fall back (snake) tiles
    for idx in fall_back_indices:
        # Fall back by 3-8 tiles, but not before start
        drop = random.randint(3, 8)
        target = max(idx - drop, 0)
        tiles[idx].effect = "fall_back"
        tiles[idx].target = target

    return tiles

if __name__ == "__main__":
    board = generate_board(num_tiles=30, num_skip_ahead=4, num_fall_back=4, seed=42)
    for tile in board:
        print(tile)
